import{_ as e,c as s,o as i,aA as n}from"./chunks/framework.BhrY7TzW.js";const t="/MAGEMin_C.jl/v2/assets/ubuntu.Bu7pNTlw.png",o="/MAGEMin_C.jl/v2/assets/macOS.CvewObbS.png",g=JSON.parse('{"title":"MAGEMin installation (C-library)","description":"","frontmatter":{},"headers":[],"relativePath":"MAGEMin/installation.md","filePath":"MAGEMin/installation.md","lastUpdated":null}'),l={name:"MAGEMin/installation.md"};function p(c,a,d,r,h,u){return i(),s("div",null,a[0]||(a[0]=[n('<h1 id="MAGEMin-installation-C-library" tabindex="-1">MAGEMin installation (C-library) <a class="header-anchor" href="#MAGEMin-installation-C-library" aria-label="Permalink to &quot;MAGEMin installation (C-library) {#MAGEMin-installation-C-library}&quot;">​</a></h1><h2 id="Linux" tabindex="-1">Linux <a class="header-anchor" href="#Linux" aria-label="Permalink to &quot;Linux {#Linux}&quot;">​</a></h2><img src="'+t+`" alt="Ubuntu Logo" width="64" align="right"><h3 id="C-and-Fortran-Compilers" tabindex="-1">C and Fortran Compilers <a class="header-anchor" href="#C-and-Fortran-Compilers" aria-label="Permalink to &quot;C and Fortran Compilers {#C-and-Fortran-Compilers}&quot;">​</a></h3><p>Using either <code>gcc</code> or <code>clang</code> to compile MAGEMin is up to you as the runtime performances are similar. However, in the event you want to modify MAGEMin for your own use, I would advise that you compile MAGEMin with <code>clang</code> as the error handling system is more strict, which will save you from unexpected segmentation faults.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install gcc</span></span>
<span class="line"><span>sudo apt-get install clang</span></span>
<span class="line"><span>sudo apt-get install gfortran</span></span></code></pre></div><h3 id="Open-MPI-Message-Passing-Interface" tabindex="-1">Open MPI (Message Passing Interface) <a class="header-anchor" href="#Open-MPI-Message-Passing-Interface" aria-label="Permalink to &quot;Open MPI (Message Passing Interface) {#Open-MPI-Message-Passing-Interface}&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install openmpi-bin libopenmpi-dev</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>mpich</code> can equally be used.</p></div><h3 id="LAPACKE-C-version-of-the-Fortran-LAPACK-library" tabindex="-1">LAPACKE (C version of the Fortran LAPACK library) <a class="header-anchor" href="#LAPACKE-C-version-of-the-Fortran-LAPACK-library" aria-label="Permalink to &quot;LAPACKE (C version of the Fortran LAPACK library) {#LAPACKE-C-version-of-the-Fortran-LAPACK-library}&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install liblapacke-dev</span></span></code></pre></div><h3 id="NLopt-Non-Linear-Optimization-Library" tabindex="-1">NLopt (Non-Linear Optimization Library) <a class="header-anchor" href="#NLopt-Non-Linear-Optimization-Library" aria-label="Permalink to &quot;NLopt (Non-Linear Optimization Library) {#NLopt-Non-Linear-Optimization-Library}&quot;">​</a></h3><p>First, <code>cmake</code> must be installed on your machine:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install cmake</span></span></code></pre></div><p>Then <code>NLopt</code> can be installed using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo apt-get install libnlopt-dev</span></span></code></pre></div><p>Alternatively, <code>NLopt</code> can be downloaded and installed manually:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://github.com/stevengj/nlopt.git</span></span>
<span class="line"><span>cd nlopt</span></span>
<span class="line"><span>mkdir build</span></span>
<span class="line"><span>cd build</span></span>
<span class="line"><span>cmake ..</span></span>
<span class="line"><span>make</span></span>
<span class="line"><span>sudo make install</span></span></code></pre></div><h3 id="MAGEMin" tabindex="-1">MAGEMin <a class="header-anchor" href="#MAGEMin" aria-label="Permalink to &quot;MAGEMin {#MAGEMin}&quot;">​</a></h3><p>Choose the <code>C</code> compiler in the first line of the <code>Makefile</code> by commenting out one:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#CC=gcc</span></span>
<span class="line"><span>CC=clang</span></span></code></pre></div><p>Make sure the Open MPI paths for libraries and include directory in <code>Makefile</code> are correct. By default, the paths to Open MPI are the following:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) -L/usr/lib/x86_64-linux-gnu/openmpi/lib -lmpi</span></span>
<span class="line"><span>INC     = (...) -I/usr/lib/x86_64-linux-gnu/openmpi/include/</span></span></code></pre></div><p>Depending on the machine on which you want to install MAGEMin, you might need to manually specify the paths to <code>NLopt</code> libraries and include directory too:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) --L/local/home/kwak/nlopt_install/install/lib -lnlopt </span></span>
<span class="line"><span>INC     = (...) -I/local/home/kwak/nlopt_install/install/include</span></span></code></pre></div><p>If you are using <code>Lockless</code> memory allocator, add the following flag in the <code>Makefile</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) -lllalloc</span></span></code></pre></div><p>Then compile MAGEMin:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make clean; make all;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>By default, the optimization flag <code>-O3</code> and debugging flag <code>-g</code> are used.</p></div><p>To test if MAGEMin compilation was successful, you can check the version of MAGEMin by running:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./MAGEMin --version</span></span></code></pre></div><h2 id="macOS" tabindex="-1">macOS <a class="header-anchor" href="#macOS" aria-label="Permalink to &quot;macOS {#macOS}&quot;">​</a></h2><img src="`+o+'" alt="macOS Logo" width="64" align="right"><p>The installation details for macOS use <code>Homebrew</code>. However, the libraries can also be installed using <code>MacPorts</code>.</p><h3 id="C-and-Fortran-Compilers-2" tabindex="-1">C and Fortran Compilers <a class="header-anchor" href="#C-and-Fortran-Compilers-2" aria-label="Permalink to &quot;C and Fortran Compilers {#C-and-Fortran-Compilers-2}&quot;">​</a></h3><p>Using either <code>gcc</code> or <code>clang</code> to compile MAGEMin is up to you as the runtime performances are similar. However, in the event you want to modify MAGEMin for your own use, I would advise that you compile MAGEMin with <code>clang</code> as the error handling system is more strict, which will save you from unexpected segmentation faults.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install llvm</span></span>\n<span class="line"><span>brew install gcc</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>gcc</code> package comes with <code>gcc</code>, <code>g++</code>, and <code>gfortran</code>.</p></div><h3 id="MPICH-Message-Passing-Interface" tabindex="-1">MPICH (Message Passing Interface) <a class="header-anchor" href="#MPICH-Message-Passing-Interface" aria-label="Permalink to &quot;MPICH (Message Passing Interface) {#MPICH-Message-Passing-Interface}&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install mpich</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p><code>openmpi</code> can equally be used.</p></div><h3 id="LAPACKE-C-version-of-the-Fortran-LAPACK-library,-should-now-be-included-in-the-LAPACK-libraries" tabindex="-1">LAPACKE (<code>C</code> version of the Fortran <code>LAPACK</code> library, should now be included in the <code>LAPACK</code> libraries) <a class="header-anchor" href="#LAPACKE-C-version-of-the-Fortran-LAPACK-library,-should-now-be-included-in-the-LAPACK-libraries" aria-label="Permalink to &quot;LAPACKE (`C` version of the Fortran `LAPACK` library, should now be included in the `LAPACK` libraries) {#LAPACKE-C-version-of-the-Fortran-LAPACK-library,-should-now-be-included-in-the-LAPACK-libraries}&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install lapack</span></span></code></pre></div><p>If the <code>lapacke</code> libraries are not included, you can download the <code>LAPACK</code> package from Netlib that includes it.</p><h3 id="NLopt-Non-Linear-Optimization-Library-2" tabindex="-1">NLopt (Non-Linear Optimization Library) <a class="header-anchor" href="#NLopt-Non-Linear-Optimization-Library-2" aria-label="Permalink to &quot;NLopt (Non-Linear Optimization Library) {#NLopt-Non-Linear-Optimization-Library-2}&quot;">​</a></h3><p><code>NLopt</code> can be installed using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>brew install nlopt</span></span></code></pre></div><h3 id="MAGEMin-2" tabindex="-1">MAGEMin <a class="header-anchor" href="#MAGEMin-2" aria-label="Permalink to &quot;MAGEMin {#MAGEMin-2}&quot;">​</a></h3><p>Choose the <code>C</code> compiler in the first line of the <code>Makefile</code> by commenting out one:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#CC=gcc</span></span>\n<span class="line"><span>CC=clang</span></span></code></pre></div><p>Make sure the <code>MPICH</code> paths for libraries and include directory in the <code>Makefile</code> are correct, for instance:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) /opt/homebrew/lib/libmpich.dylib</span></span>\n<span class="line"><span>INC     = (...) -I/opt/homebrew/include</span></span></code></pre></div><p>Do the same for <code>LAPACKE</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) /opt/homebrew/opt/lapack/lib/liblapacke.dylib</span></span>\n<span class="line"><span>INC    += (...) -I/opt/homebrew/opt/lapack/include</span></span></code></pre></div><p>And <code>NLopt</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS   += (...) /opt/homebrew/lib/libnlopt.dylib</span></span></code></pre></div><p>Which should give:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS    = -lm -framework Accelerate /opt/homebrew/opt/lapack/lib/liblapacke.dylib /opt/homebrew/lib/libnlopt.dylib /opt/homebrew/lib/libmpich.dylib</span></span>\n<span class="line"><span>INC     = -I/opt/homebrew/opt/lapack/include -I/opt/homebrew/include</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This setup is provided by default in the <code>Makefile</code> for macOS. As long as you installed every package using <code>Homebrew</code>, you should be able to install MAGEMin without modifying these entries.</p></div><p>If you decided to use <code>openmpi</code> instead of <code>mpich</code>, your <code>Makefile</code> should look like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LIBS    = -lm -framework Accelerate /opt/homebrew/opt/lapack/lib/liblapacke.dylib /opt/homebrew/opt/nlopt/lib/libnlopt.dylib /opt/homebrew/opt/openmpi/lib/libmpi.dylib  </span></span>\n<span class="line"><span>INC     = -I/opt/homebrew/opt/openmpi/include/ -I/opt/homebrew/opt/lapack/include -I/usr/local/include -I/opt/homebrew/opt/nlopt/include/</span></span></code></pre></div><p>Then simply enter the MAGEMin directory and compile MAGEMin as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>make clean; make all;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Note</p><p>By default, the optimization flag <code>-O3</code> and debugging flag <code>-g</code> are used.</p></div><p>To test if MAGEMin compilation was successful, you can check the version of MAGEMin by running:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./MAGEMin --version</span></span></code></pre></div>',67)]))}const m=e(l,[["render",p]]);export{g as __pageData,m as default};
